<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title id="pageTitle">Multiplayer Prompt</title>
  <link rel="stylesheet" href="style.css">
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 30px;
      text-align: center;
      background: #e3dba2;
      color: #967e00;
    }
    .button-group {
      display: flex;
      justify-content: center;
      gap: 10px;
      margin-top: auto;
    }
    article {
      max-width: 1000px;
      margin: auto;
    }
    #customDisplay {
      margin: 20px auto;
      font-size: 16px;
      line-height: 1.4;
      background: #faf4c7;
      padding: 15px;
      border-radius: 8px;
      border: 2px solid #967e00;
      text-align: left;
    }
    .story {
      margin: 30px auto;
      max-width: 1000px;
      font-size: 18px;
      line-height: 1.6;
      background-color: #ffffff;
      padding: 20px;
      border-radius: 10px;
    }
    .storyButton {
      margin: 5px;
      padding: 8px 12px;
      font-size: 14px;
      border: 2px solid #967e00;
      background: #faf1ab;
      color: #967e00;
      cursor: pointer;
      border-radius: 4px;
    }
    .storyButton:hover {
      background: #ffffff;
    }
    #copyBuffer {
      position: absolute;
      left: -9999px;
    }
    .option-grid {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 20px;
      margin-top: 30px;
    }
    .option-box {
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      background: #faf4c7;
      border: 2px solid #967e00;
      border-radius: 8px;
      padding: 15px;
      text-align: left;
      min-height: 280px;
    }
    .option-box h3 {
      margin-top: 0;
      color: #e48198;
    }
    .option-box p {
      margin: 8px 0;
    }
    .result-box {
      display: none;
      margin-top: 30px;
      background: #ffffff;
      border: 2px solid #967e00;
      border-radius: 8px;
      padding: 20px;
      max-width: 600px;
      margin-left: auto;
      margin-right: auto;
      text-align: left;
    }
    .result-box h3 {
      margin-top: 0;
      color: #e48198;
    }
    #resultActions {
      margin: 15px 0;
    }
  </style>
</head>
<body class="prompt">
<article>
  <h2 id="promptTitle">Your Prompt Title Here</h2>
  <p>By Tenshilove</p>

  <div id="customDisplay"></div>
  <button class="storyButton" onclick="goToFix()">Fix Parameters</button>
  <button class="storyButton" onclick="goToPage('index')">To Index</button>

  <div class="story">
    <div id="storyBox"></div>
    <button class="storyButton" onclick="copyStory()">Copy Story</button>
  </div>

  <div class="option-grid" id="optionGrid"></div>

  <div class="result-box" id="resultBox">
    <h3 id="resultTitle"></h3>
    <p id="resultText"></p>
    <div id="resultActions"></div>
  </div>

  <textarea id="copyBuffer"></textarea>
</article>

<script>
  // 0) pull URL params
  const params = new URLSearchParams(window.location.search);

  // 1) simple casing helpers
  const lc  = s => (s||"").toLowerCase();
  const cap = s => (s||"")[0]?.toUpperCase() + (s||"").slice(1);

  // 2) pronounSet → flat keys your template expects
  function pronounSet(subj) {
    subj = lc(subj);
    switch (subj) {
      case "she":  return {
        HeSheThey:     "she",
        HimHerThem:    "her",
        HisHerTheir:   "her",
        HisHersTheirs: "hers",
        WasWere:       "was",
        DoesDo:        "does",
        HasHave:       "has"
      };
      case "he":   return {
        HeSheThey:     "he",
        HimHerThem:    "him",
        HisHerTheir:   "his",
        HisHersTheirs: "his",
        WasWere:       "was",
        DoesDo:        "does",
        HasHave:       "has"
      };
      case "they": return {
        HeSheThey:     "they",
        HimHerThem:    "them",
        HisHerTheir:   "their",
        HisHersTheirs: "theirs",
        WasWere:       "were",
        DoesDo:        "do",
        HasHave:       "have"
      };
      default:     return {
        HeSheThey:     "it",
        HimHerThem:    "it",
        HisHerTheir:   "its",
        HisHersTheirs: "its",
        WasWere:       "was",
        DoesDo:        "does",
        HasHave:       "has"
      };
    }
  }

  // 3) ensure we got all params
  const required = [];
  for (let i = 1; i <= 4; i++) {
    required.push(
      `Player${i}Name`,
      `Player${i}HeSheThey`,
      `Player${i}Class`,
      `Player${i}Weapon`,
      `Player${i}Damage`
    );
  }
  if (required.some(k => !params.get(k))) {
    window.location.href = `fix.html?${params}`;
  }

  // 4) define real globals for Player1…Player4
  const players = [];
  for (let i = 1; i <= 4; i++) {
    const rawName  = params.get(`Player${i}Name`)    || "";
    const rawPron  = params.get(`Player${i}HeSheThey`)|| "";
    const rawClass = params.get(`Player${i}Class`)   || "";
    const rawWeap  = params.get(`Player${i}Weapon`)  || "";
    const rawDmg   = params.get(`Player${i}Damage`)  || "";

    const Name      = cap(lc(rawName));
    const HeSheThey = lc(rawPron);
    const Class     = cap(lc(rawClass));
    const Weapon    = cap(lc(rawWeap));
    const Damage    = lc(rawDmg);

    const pfx = pronounSet(HeSheThey);

    // expose as globals
    window[`Player${i}Name`]          = Name;
    window[`Player${i}HeSheThey`]     = pfx.HeSheThey;
    window[`Player${i}HimHerThem`]    = pfx.HimHerThem;
    window[`Player${i}HisHerTheir`]   = pfx.HisHerTheir;
    window[`Player${i}HisHersTheirs`] = pfx.HisHersTheirs;
    window[`Player${i}WasWere`]       = pfx.WasWere;
    window[`Player${i}DoesDo`]        = pfx.DoesDo;
    window[`Player${i}HasHave`]       = pfx.HasHave;
    window[`Player${i}Class`]         = Class;
    window[`Player${i}Weapon`]        = Weapon;
    window[`Player${i}Damage`]        = Damage;

    // also collect into players[] for the top display
    players.push({Name, HeSheThey, Class, Weapon, Damage});
  }

  // 5) render the top summary
  document.getElementById("customDisplay").innerHTML =
    players.map((p, i) =>
      `<strong>Player ${i+1}:</strong> ${p.Name} — 
       <em>${p.HeSheThey}</em> | Class: ${p.Class} | Weapon: ${p.Weapon} | Damage: ${p.Damage}`
    ).join("<br>");

  // 6) story injection now works
  const storyText = `
"This place looks awful," ${Player1Name} murmured,
${Player1HisHerTheir} voice hushed, the usual boisterous energy in
${Player1HisHerTheir} tone replaced by a somber note.
${cap(Player1HisHerTheir)} hand instinctively went to
${Player1HisHerTheir} ${Player1Weapon}, a gesture of protective readiness.
  `.trim();
  document.getElementById("storyBox").innerText = storyText;

  // 7) modular actions & UI – exactly as before
  const actions = [
    {
      name:      "Brave the Mud",
      condition: "Always available",
      prompt:    "The adventurers descend into the pit and wade through the sludge. The thick substance is heavy on their bodies and gear as they struggle to cross.",
      result:    "They cautiously enter the mud pit and continue on their way, eyes pinned on the dry arch at the end.",
      next:      { label: "Continue", url: "brave" }
    },
    {
      name:      "Use Rope",
      condition: "Requires item: Rope",
      prompt:    "The adventurers tie the rope to a fixture and use it to climb down and across the sludge.",
      result:    "The rope holds firm, and the party crosses without losing resources.",
      next: [
        { label: "Fail",    url: "a" },
        { label: "Succeed", url: "b" }
      ]
    },
    {
      name:      "Use Bucket",
      condition: "Requires item: Bucket",
      prompt:    "The adventurers scoop out the sludge to clear a path.",
      result:    "The path is cleared, but the effort costs them 1 resource.",
      next:      { label: "Continue", url: "bucket" }
    },
    {
      name:      "Water Spell",
      condition: "Requires mage with water spell",
      prompt:    "The sludge is soaked in water magic, making it lighter and easier to cross.",
      result:    "The spell is cast successfully. The party crosses with ease, using up 1 cast.",
      next:      { label: "Continue", url: "water" }
    }
  ];

  const grid     = document.getElementById("optionGrid");
  const resBox   = document.getElementById("resultBox");
  const resTitle = document.getElementById("resultTitle");
  const resText  = document.getElementById("resultText");
  const resAct   = document.getElementById("resultActions");

  actions.forEach((act, idx) => {
    const box = document.createElement("div");
    box.className = "option-box";
    box.innerHTML = `
      <h3>${act.name}</h3>
      <p><strong>Condition:</strong> ${act.condition}</p>
      <p>${act.prompt}</p>
      <div class="button-group">
        <button class="storyButton" onclick="showResult(${idx})">Proceed</button>
        <button class="storyButton" onclick="copyPrompt(${idx})">Copy Prompt</button>
      </div>
    `;
    grid.appendChild(box);
  });

  function showResult(idx) {
    const act = actions[idx];
    resTitle.innerText = `Result: ${act.name}`;
    resText.innerText  = act.result;
    resAct.innerHTML   = "";

    const nexts = Array.isArray(act.next) ? act.next : [act.next];
    nexts.forEach(({label, url}) => {
      const btn = document.createElement("button");
      btn.className = "storyButton";
      btn.innerText = label;
      btn.onclick   = () => goToPage(url);
      resAct.appendChild(btn);
    });

    const copyBtn = document.createElement("button");
    copyBtn.className = "storyButton";
    copyBtn.innerText = "Copy Result";
    copyBtn.onclick   = copyResult;
    resAct.appendChild(copyBtn);

    resBox.style.display = "block";
  }

  function copyPrompt(idx) {
    navigator.clipboard.writeText(actions[idx].prompt)
      .then(() => alert("Prompt copied!"))
      .catch(() => alert("Copy failed."));
  }

  function copyResult() {
    navigator.clipboard.writeText(resText.innerText)
      .then(() => alert("Result copied!"))
      .catch(() => alert("Copy failed."));
  }

  const title = "Your Prompt Title Here";
  document.getElementById("pageTitle").innerText   = title;
  document.getElementById("promptTitle").innerText = title;

  function goToFix()    { window.location.href = `fix.html?${params}`; }
  function goToPage(pg){ window.location.href = `${pg}.html?${params}`; }

  function copyStory(){
    navigator.clipboard.writeText(storyText)
      .then(() => alert("Story copied!"))
      .catch(() => alert("Copy failed."));
  }
</script>
</body>
</html>

